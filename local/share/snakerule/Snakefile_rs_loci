include: "conf.sk"

# top ram usage is 7%
# real    11m40.986s
# user    8m4.596s
# sys     0m39.287s
#
# On tungsteno 18%
#real    12m41.042s
#user    8m52.729s
#sys     0m21.549s

rule ld_friends:
    input: snps=SNPS, ld=LD, vcf=HAPLOREG
    output: 'snps_loci_ld'
    params: tool=BIN_DIR+"/produce_ld_for_merge"
    log: 'snps_loci_ld_no_coords'
    shell: """
            zcat {input.ld} | {params.tool} -c <(zcat {input.vcf} | grep -v "^#" | cut -f 1,2,3) -s {input.snps} > {output} 2> {log}
           """

rule ld_graph:
    input: 'snps_loci_ld'
    output: '{chr}_snps_loci_ld_{cutoff}'
    params: tool=BIN_DIR+"/make_ld_islands_graph"
    shell: """
            bawk '$1=="{wildcards.chr}"{{print $2,$3,$4,$5,$6}}' {input} | {params.tool} -r {wildcards.chr} -c {wildcards.cutoff} > {output}
           """

rule all_ld_graph:
    input: expand("{chr}_snps_loci_ld_{{cutoff}}", chr=CHRS)
    output: "snps_loci_ld_{cutoff}"
    shell: "cat {input} > {output}"

rule all_interesting_ld_graph:
    input: ld="snps_loci_ld_{cutoff}", snps=SNPS
    output: "wantedsnps_loci_ld_{cutoff}"
    shell: "grep -w -v dummy {input.ld}  | grep -f {input.snps} > {output}"
 

rule merge_islands:
    input: "wantedsnps_loci_ld_{cutoff}"
    output: "mergedwantedsnps_loci_ld_{cutoff}"
    shell: "sort -k1,1 -k2,2n {input} | bedtools merge -delim '_' -c 4 -o collapse -i - > {output}"

### get all SNPs inside 0.8 R2 linkage islands.
# bedtools  intersect -a ../../local/share/data/haploreg_v4.0_20151021.vcf.gz -b wantedsnps_loci_ld_0.8 > prova_intersect
rule get_overlapping:
    input: snps="mergedwantedsnps_loci_ld_0.8", vcf=HAPLOREG
    output: "wanted_snps_loci_overlapping"
    shell: """
            cut -f 4 {input.snps} | tr "_" "\n" > {output}.snps.tmp
            zcat {input.vcf} | grep -v "^#" | bawk '{{print $1, $2-1, $2, $3}}' | filter_1col -v 4 {output}.snps.tmp > {output}.vcfbed.tmp
            bedtools intersect -wa -wb -a {input.snps} -b {output}.vcfbed.tmp > {output}
           """ 
   
# we now have this perl do two different things, not so good: our loci managment and looking for info.
# another more granular possibility would be to obtain a plain list of all the snps and then put back there loci informations,
# but sincerely...I do not think this would matter right now since I do not have time to think wisely about general reusable tool
# and probably it would represent a waste of time at the end (reusable by me...).
rule haploreg_vcf_info:
    input: snps="wantedsnps_loci_ld_0.8", vcf=HAPLOREG, info=WANTED_INFO
    output: "snps_haploreg_info.gz"
    params: tool=BIN_DIR+"/annotate_from_vcf"
    shell: """ 
                zcat {input.vcf} | {params.tool} -s {input.snps} -i {input.info} | gzip > {output}
           """

#META:
#1 LOCUS ID
#2 LOCUS CHR
#3 LOCUS START
#4 LOCUS END
#5 CHR RS
#6 COORD RS
#7 RSID
#8 REF
#9 ALT (biallelic comma sep)
#10 AF AFR,AMR,ASN,EUR
#11 NEAREST_GENCODE
#12 ROADMAP_CHROMHMM_15STATE
#13 ROADMAP_HISTONE_MARK_PEAKS
#14 ROADMAP_DNASE
#15 DBSNP
#16 SIPHY

rule filter_vcf_info:
    input: info="snps_haploreg_info.gz", eid=EID, eid_info=EID_INFO
    output: out="snps_haploreg_filtered_info"
    run:
        import gzip
        import re
        weid = {}
        with open(input.eid, 'r') as eid:
            for l in eid.readlines():
                l = l.rstrip()
                weid[l] = "NA"
        with open(input.eid_info, 'r') as eid_info:
            for l in eid_info.readlines():
                l = l.rstrip()
                fields = l.split("\t")
                if fields[0] in weid:
                    weid[fields[0]] = fields[5]
        with open(output.out, "w") as out, gzip.open(input.info, 'rt') as info:#, open(output.n, "w") as n:
                #i = 0
                for l in info.readlines():
                    #n.write(str(i))
                    #n.write("\n")
                    #i = i+1
                    l = l.rstrip()
                    l = re.sub('NA','', l)
                    fields = l.split("\t")
                    # field 9 is AF, we split on , and keep only EUR (3)
                    if fields[9] != '':
                        afs = fields[9].split(',')
                        fields[9] = afs[3]
                    # we need to look only for our EIDs in field 11,12,13 and translate them
                    def look_for_eids(all_piped, eid) :
                        if all_piped != '':
                            res = []
                            cells = all_piped.split(',')
                            for c in cells:
                                mark_cell = c.split('|')
                                # dnase is not eid|mark but just eid
                                if len(mark_cell) == 2:
                                    mark = mark_cell[1]
                                    eid = mark_cell[0]
                                    if eid in weid:
                                        res.append(mark + "|" + weid[eid])
                                else:
                                    eid = mark_cell[0]
                                    if eid in weid:
                                        res.append(weid[eid])
                            if len(res) == 0:
                                return 'other cells'
                            return ','.join(res)
                        return ''
                    fields[11] = look_for_eids(fields[11], eid)
                    fields[12] = look_for_eids(fields[12], eid)
                    fields[13] = look_for_eids(fields[13], eid)
                    out.write("\t".join(fields))
                    out.write("\n")


# Remember to filter out those without any overlap!!!
#[egrassi@gncomp3 sle]$ cat snps_haploreg_filtered_info |  bawk '$13!=""' | wc -l
#3648
#[egrassi@gncomp3 sle]$ cat snps_haploreg_filtered_info |  bawk '$13==""' | wc -l
#1162
#[egrassi@gncomp3 sle]$ cat snps_haploreg_filtered_info |  bawk '$13=="NA"' | wc -l
#283
#
#[egrassi@gncomp3 sle]$ cat snps_haploreg_filtered_info |  bawk '$13!=""' | wc -l
#3648
#[egrassi@gncomp3 sle]$ cat snps_haploreg_filtered_info |  bawk '$13==""' | wc -l
#1162
#
## so remember that you have 4810 SNPs but only 3648 overlapping with epigenetic markers.

# We remove snps falling in categories with a clear coding role and obtain a bed for capsecum, ids are locus_rs

rule capsecum:
    input: snps="snps_haploreg_filtered_info", filter=CODING_DBSNP
    output: "capsecum.bed"
    shell: """
            bawk '{{if ($15 =="") {{$15="NA"}} print}}' {input.snps} | filter_1col -v 15 {input.filter} | bawk '{{print "chr"$2,$6-1,$6,$1"_"$7}}' > {output}
           """ 
