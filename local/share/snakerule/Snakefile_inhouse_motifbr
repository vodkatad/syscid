include: "conf.sk"

### distance between SNPs?
#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n chr
#3:chr.x
#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n position
#6:position
#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n variant
#5:variant
#
## we sum the length of the reference allele to have enough sequence when there are dels (we get around the snp +- the longest pwm)
## for ins there aren't problems we will end up with more sequence.
#
## Snps coords for get_genomes needs to be 1 based so we do not remove 1 to the starting coord!
rule snps:
    input: SNPS
    output: "snps_info"
    shell:  """
            sed 1d {input[0]} | cut -f 3,5,6,28,29 | bawk '{{print "chr"$1,$3,$3+length($5),$2,$5,$4}}' | sort -k1,1 -k2,2n | uniq > {output}
            """

rule longest_pwm:
    input: PWM_CONS
    output: "halfmaxlen"
    shell: """
            bawk '{{print int(length($2)/2)}}' < {input} | sort -n | tail -n 1 > {output}
           """

rule bed:
    input: snps="snps_info", halfmaxlen="halfmaxlen"
    output: "snps.bed"
    shell: """
            L=`cat {input.halfmaxlen}`; \\
            bawk -vl=$L '{{print $1,$2-l,$3+l,$4}}' <  {input.snps} > {output}
           """

# do they overlap? Yes:
# [egrassi@gncomp3 huang_inhouse_motifbr]$ bedtools merge -d 1 -c 4 -o collapse -i snps.bed | wc -l
# 3814
# [egrassi@gncomp3 huang_inhouse_motifbr]$ wc -l snps.bed 
# 4083 snps.bed
#
# but leading snps not, so right now I work only on them without managing the overlap
#
#
rule lead_bed:
    input: bed="snps.bed", lead=LEAD
    output: "snps.lead.bed"
    shell:
        """ filter_1col 4 {input.lead} < {input.bed} > {output}
            N1=`cat {output} | wc -l`; \\
            N2=`bedtools merge -d 1 -c 4 -o collapse -i {output} | wc -l`; \\
            if [ $N1 -ne $N2 ]; then \\
                echo "BAAH! Some lead snps overlap!"; \\
                rm {output}; \\
            fi
        """

### L=longest matrix, get around SNP bondaries +-L

### produce ad hoc files (results of deconvolve vcf) where allele1 is always ref and allele2 is always alt
rule get_sequences_input:
    input: info="snps_info", lead=LEAD
    output: samples="{chr}.snps_lead.samples", alleles="{chr}.snps_lead.alleles"
    shell: """
            filter_1col 4 {input.lead} < {input.info} | bawk '$1=="{wildcards.chr}"' | sort -k1,1 -k2,2n > {output.samples}.tmp
            bawk '{{print $4,NR,$1,$2,$5,$6}}' {output.samples}.tmp > {output.alleles}
            bawk '{{print NR,"het",$5,$6}}' {output.samples}.tmp > {output.samples}
            rm {output.samples}.tmp
           """
#
## alleles files
#.META: %/significant_variants_ncs_pruned_alleles
#        1       snpid   snp_1_9908269
#        2       id      137576
#        3       chr     1
#        4       coord   9908269
#        5       REF     C
#        6       ALT     T
#
## samples alleles files
#.META: %/significant_variants_ncs_pruned_samples_alleles
#        1       id      137576
#        2       sample  sample
#        3       allele1 C
#        4       allele2 T

### get_sequences
rule all_get_sequences:
    input: expand("{chrom}.snps_lead.fa", chrom=CHRS)
    output: "all.snps_lead.fa"
    shell: "cat {input} | perl -pane 'if ($_ !~ /^>/) {{ $_ = uc($_); }}' > {output}"

rule get_sequences:
    input: samples="{chr}.snps_lead.samples", alleles="{chr}.snps_lead.alleles", bed="snps.lead.bed"
    params: seq_dir=SEQ_DIR, get_genomes=BIN_DIR+"/get_genomes_from_bed"
    output: "{chr}.snps_lead.fa"
    shell: """
           sort -k2,2 -k1,1n {input.samples} | {params.get_genomes} {input.alleles} {params.seq_dir} <(sort -k1,1 -k2,2n {input.bed} | bawk '$1=="{wildcards.chr}"') > {output}
           """

### score with fimo (no bg?)
#fimo --oc $(FIMO_DIR_REF) --norc  --thresh 1 $< $^2
rule run_fimo:
    input: "all.snps_lead.fa"
    output: "lead/fimo.txt"
    log: "lead/fimo.log"
    params: pwm=PWM_MEME, fimo=BIN_DIR+"/fimo"
    shell: "mkdir -p lead; {params.fimo} --oc lead --thresh 1 {params.pwm} {input} 2> {log}"

### select SNPs with != scores, at least one 'allele' over a given threshold
# TODO EXPLAIN 
rule fimo_manage:
    input: fimo="lead/fimo.txt", annot=PWM_ANNOT
    output: created="created_lead_fimo", destroyed="destroyed_lead_fimo"
    params: cutoff=0.05, placeholder="fimo_manage"
    shell: """
          cat {input.fimo} | sed 1d |  sed 's/;/\t/g' | tee >(bawk '$4=="allele2" && $15<{params.cutoff} {{print $1"@"$5"@"$10"@"$12,$13,$15}}' > {params.placeholder}.allele2) | bawk '$4=="allele1" && $15<{params.cutoff} {{print $1"@"$5"@"$10"@"$12,$13,$15}}' > {params.placeholder}.allele1
          translate -v -e "NA\tNA" -a {params.placeholder}.allele1 1 < {params.placeholder}.allele2 | bawk '$2=="NA"{{print $1,$4,$5,"created"}}' > {params.placeholder}.tmp
          translate -v -e "NA\tNA" -a {params.placeholder}.allele2 1 < {params.placeholder}.allele1 | bawk '$2=="NA"{{print $1,$4,$5,"destroyed"}}' >> {params.placeholder}.tmp
          tr "@" "\t" < {params.placeholder}.tmp | bawk '$7=="created" {{print $2,$1}}' | translate -a <(cut -f 1,10 {input.annot}) 2 > {output.created}
          tr "@" "\t" < {params.placeholder}.tmp | bawk '$7=="destroyed" {{print $2,$1}}' | translate -a <(cut -f 1,10 {input.annot}) 2 > {output.destroyed}
          """

#rm {params.placeholder}.allele1 {params.placeholder}.allele2 {params.placeholder}.tmp
# the same with filter_1col:
# [egrassi@gncomp3 huang_inhouse_motifbr]$ filter_1col 1 <(cut -f 1 lead_fimo.allele1) < lead_fimo.allele2 | wc -l
# 474
# [egrassi@gncomp3 huang_inhouse_motifbr]$ filter_1col -v 1 <(cut -f 1 lead_fimo.allele1) < lead_fimo.allele2 | wc -l
# 171
# [egrassi@gncomp3 huang_inhouse_motifbr]$ filter_1col -v 1 <(cut -f 1 lead_fimo.allele2) < lead_fimo.allele1 | wc -l
# 248
# [egrassi@gncomp3 huang_inhouse_motifbr]$ grep -c created lead_fimo
# lead_fimo             lead_fimo.allele1     lead_fimo.allele2     lead_fimo.gz.allele1  lead_fimo.gz.allele2  
# [egrassi@gncomp3 huang_inhouse_motifbr]$ grep -c created lead_fimo
# 171
# [egrassi@gncomp3 huang_inhouse_motifbr]$ grep -c destroyed lead_fimo
# 248
#

#####################################
# snpid   gene    db      name    id      scoreRef        scoreAlt        effect
rule crosstab_motifbr:
    input: "{kind}_lead_fimo"
    output: "{kind}.matrix"
    run: 
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['snpid','motif','subfamily'])
         #data.groupby(['snpid'])['gene'].agg({'n': 'nunique', 'gene': ','.join}) # deprecated
         data1 = data.groupby(['snpid'])['motif'].agg(['nunique', ','.join]).rename(columns={'nunique': 'n_dTF', 'join':'motif'})
         data2 = data.groupby(['snpid'])['subfamily'].agg(['nunique', lambda x: ','.join(set(x))]).rename(columns={'nunique': 'n_dfam', 'join':'subfamily'})
         merged = data2.join(data1)
         merged.to_csv(output[0], sep='\t', index=True)

#input: snps=SNPS, overlap=overlap_wf(OVERLAP), create="created.matrix", destroy="destroyed.matrix", lead=LEAD
rule annotate_motif_divided:
    input: snps=SNPS, overlap=OVERLAP, create="created.matrix", destroy="destroyed.matrix", lead=LEAD
    output: "divided_overlap_lead.xls"
    shell:  """
            head -n 1 {input.overlap} > {output}.header
            sed 1d {input.snps} | bawk '{{print "chr"$3":"$6-1":"$29":"$28,$0}}' | filter_1col 6 <(cat {input.overlap} | cut -f 1 | sort | uniq) \
            | filter_1col 6 <(cut -f 1 {input.lead}) \
            | translate -a {input.overlap} 6 | translate -a -v -e "\t\t\t" {input.create} 1 | translate -a -v -e "\t\t\t" {input.destroy} 1 \
            > {output}.body
            cat {output}.header {output}.body | tab2xls > {output}
            rm {output}.header
            """
