include: "snakemake"

rule all_overlap:
    input: expand("{prefix}_{mark}.overlap.bed.gz", prefix=PREFIX, mark=WANTED_MARKERS)


#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n chr
#3:chr.x
#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n position
#6:position
#[egrassi@gncomp3 all_single]$ head -n 1 ../../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n variant
#5:variant
rule overlap:
    input: SNPS, PEAKS_DIR+"/{mark}_wanted_{prefix}"+KIND+".gz", PREFIX_ANNOT
    output: "{prefix}_{mark}.overlap.bed.gz"
    shell:  """
            sed 1d {input[0]} | cut -f 3,5,6,29 | bawk '{{print "chr"$1,$3-1,$3-1+length($4),$2}}' | sort -k1,1 -k2,2n | uniq > snps.tmp
            bedtools intersect -wa -wb -a snps.tmp -b <(zcat {input[1]} | bawk '$14>2') | bawk '{{print $0,"{wildcards.prefix}","{wildcards.mark}"}}' \
            | cut -f 1,2,4,18,20,21 | translate -a <(cut -f 1,5 {input[2]}) 5 | gzip > {output} 
            """

rule all_moverlap:
    input: expand("{mark}.overlap.bed", mark=WANTED_MARKERS)

rule merged_overlap:
    input: expand("{prefix}_{mark}.overlap.bed.gz", prefix=PREFIX, mark=WANTED_MARKERS)
    output: "overlap.bed"
    shell: """
            rm -f {output}
            for f in {input}; do zcat $f | cut -f 3,4,6,7; done | sort -k1,1 -k3,3 -k4,4 -k2,2n |  bawk '{{print $1,$3"_"$4,$2}}' | tr " " "-" >> {output}
           """

rule crosstab:
    input: "overlap.bed"
    output: "overlap.matrix"
    run: 
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['snp','peak','logp'])#
         data = data.pivot_table(index='snp', columns='peak', values='logp',  fill_value='', aggfunc='max')
         data.to_csv(output[0], sep='\t', index=True)

rule annotate:
    input: SNPS, "overlap.matrix"
    output: "overlap.xls"
    shell:  """
            head -n 1 {input[1]} > {output}.header
            sed 1d {input[0]} | filter_1col 5 <(cat {input[1]} | cut -f 1 | sort | uniq) \
            | translate -v -a -d -j {input[1]} 5 > {output}.body
            cat {output}.header {output}.body | tab2xls > {output}
            rm {output}.header {output}.body
            """

#### Motifbreakr analysis, we need to produce a bed file in the format:
#chr1   2498026 2498027 chr1:2498026:A:G    0   +
# (I decided to avoid downloading DBSNP info from R packages and instead for now exploiting Huang ref/alt alleles)
# then an R script will produce a "long" format with info on motif broken by SNPs (using default Motifbreakr parameters with only
# hocomoco or whole human datasets for now) that can ben reduced to "wide" format to produce a final matrix (with also overlap info) and an excel.
# Probably in the and a website with links could be more useful for Amy...will have time to do that?

# A0 is the reference allele, A1 the "tested"/alternate, they are all on the positive strand (checked for some of them manually,
# also those reported as  on - strand by SNPdb (...dunno why)
#[egrassi@gncomp3 huang_roadmap_overlap]$ head -n 1 ../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n A0
#29:A0.x
#[egrassi@gncomp3 huang_roadmap_overlap]$ head -n 1 ../../local/share/data/huang_nc_snps.tsv   | tr "\t" "\n" | grep -n A1
#28:A1.x
# Here as length I refer to the length on the reference genome, therefore I add length($5) and not $4 as before for the overlapping rule (in retrospect maybe 
# a max would have been better for the overlap XXX)
rule motifbreakr_bed:
    input: SNPS
    output: "motifbreakr.bed"
    shell:  """
            sed 1d {input[0]} | cut -f 3,5,6,28,29 | bawk '{{print "chr"$1,$3-1,$3-1+length($5),"chr"$1":"$3-1":"$4":"$5,0,"+"}}' | sort -k1,1 -k2,2n | uniq > {output}
            """
rule all_motifbreark:
    input: "all.motifbr", "hocomoco.motifbr"

# I have three options for the conda environment (I had to get an old gls from an ad hoc channel: https://github.com/kundajelab/atac_dnase_pipelines/issues/30
# to install motifbreakR):
# 1- remind to "source activate motifbreakr" before calling snakemake (!)
# 2- use system inside R and a param
# 3- understand how to call source activate before the script: directive (or use dummy pre/post rules, do cascades of rules work in activated environments?)
# 4- call a script with getopt and use shell: instead of script:
# Since I'm stupid and 2 clearly does not work I'll use n.1 right now :(
rule motifbreakr:
    input: snp_bed="motifbreakr.bed"
    output: out="{pwmdb}.motifbr"
    params: db="{pwmdb}", conda="motifbreakr"
    log: logfile="{pwmdb}.motifbr.log"
    script: SRC_DIR+"/motifbreakR.R"

